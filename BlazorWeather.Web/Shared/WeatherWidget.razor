@inject IWeatherService weatherService


@if (city == null || currentWeather == null || forecastWeather == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="m-3">
            <h5>Город</h5>
            @city.Name
            <br />
            @city.Country
            <br />
            @city.Local_names?["ru"]
        </div>

        <hr />

        <div class="m-3">
            <h5>Погода сейчас</h5>
            Температура @currentWeather.Main.Temp
            <br />
            Ощущается как @currentWeather.Main.FeelsLike
            <br />
            @currentWeather.Weather.First().Description
            <br />
            Максимальная температура @currentWeather.Main.TempMax
            <br />
            Минимальная температура @currentWeather.Main.TempMin
            <br />
            Давление @currentWeather.Main.Pressure hPa
            <br />
            Влажность @currentWeather.Main.Humidity %
            <br />
            Облачность @currentWeather.Clouds.All %
            <br />
            Скорость ветра @currentWeather.Wind.Speed м/с
            <br />

            @if(currentWeather.Snow != null)
            {
                <text>Снег</text> @currentWeather.Snow.hour <text>мм</text>
            }
            else if (@currentWeather.Rain != null)
            {
                <text>Дождь</text> @currentWeather.Rain.hour <text>мм</text>
            }

            Время обновления @ConvertDateFromUnix(currentWeather.Dt)
        </div>

        <hr />

        <div class="m-3">
            <p>Прогноз погоды</p>
            @foreach (var item in forecastWeather.List)
            {
                @item.Main.Temp
                <br />
            }
        </div>
    </div>
}

@code {
    private GeocodingDto? city;
    private WeatherCurrentDto? currentWeather;
    private WeatherForecastDto? forecastWeather;

    private DateTime ConvertDateFromUnix(int dt)
    {
        DateTime dateTime = new(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        return dateTime.AddSeconds(dt).ToLocalTime();
        
    }

    protected override async Task OnInitializedAsync()
    {
        city = await weatherService.GetCityLocation();
        currentWeather = await weatherService.GetWeather();
        forecastWeather = await weatherService.GetForecast();
    }
}
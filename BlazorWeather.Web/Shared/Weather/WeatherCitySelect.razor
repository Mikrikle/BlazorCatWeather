@using System.ComponentModel.DataAnnotations;
@inject IWeatherService weatherService
@inject NavigationManager navigationManager

@if (city != null)
{
    <h3>
        Ваш город:
        @{
            var name = (city.Local_names?.ContainsKey("ru")) ?? false ? city?.Local_names["ru"] : city.Name;
            <text>@name</text>
        }
    </h3>
}
else
{
    <h3>Ваш город не выбран</h3>
}

<hr />
<h5>Вы можете сменить город</h5>
<EditForm Model="@seLectCityModel" OnValidSubmit="@HandleValidSubmit">

    <div class="bg-white rounded-5">
        <DataAnnotationsValidator />
        <ValidationSummary />
    </div>

    <div class="mb-3">
        <InputText class="form-control text-dark" id="name" @bind-Value="seLectCityModel.Name" />
    </div>

    <div class="mb-3">
        <button class="btn btn-primary" type="submit">Найти</button>
    </div>

</EditForm>

@if (error != null)
{
    <ExceptionAlert ex="error"></ExceptionAlert>
}

@if (search != null)
{
    <div class="container-sm">
    @foreach (var city in search)
    {
        <div class="card border rounded px-2 m-2">
            <div class="row">
                <div class="col">
                    <div class="display-6">@city.Name</div>
                    <div class="mb-3">
                        @city.Country
                    </div>
                    <small>
                        @city.Lat
                        @city.Lon
                    </small>
                </div>
                <div class="col text-center my-auto">
                    <button class="btn btn-primary" @onclick="() => HandleSubmit(city)">Выбрать город</button>
                </div>
            </div>
        </div>
    }
    </div>
}

@code {
    private GeocodingDto? city;
    private GeocodingDto[]? search;
    private ServiceResponseException? error;

    private class SeLectCityModel
    {
        [Required(ErrorMessage = "Не указано название города")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Недопустимая длина названия города")]
        public string? Name { get; set; }
    };
    private SeLectCityModel seLectCityModel = new();

    private async Task HandleValidSubmit()
    {
        error = null;
        try
        {
            search = await weatherService.SearchCities(seLectCityModel.Name);
        }
        catch (ServiceResponseException e)
        {
            error = e;
        }

    }

    private async Task HandleSubmit(GeocodingDto city)
    {
        await weatherService.SetUserCity(city);
        navigationManager.NavigateTo("/");
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            city = await weatherService.GetUserCity();
        }
        catch (ServiceResponseException e)
        {
        }
    }
}
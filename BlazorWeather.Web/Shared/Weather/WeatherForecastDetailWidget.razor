@inject IWeatherService weatherService

@if (forecastByDays == null)
{
    @if (error != null)
    {
        <ExceptionAlert ex="error"></ExceptionAlert>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else
{
    <div class="container-lg" style="max-width: 800px;">
        @foreach (var weather_lists in forecastByDays)
        {
            <Collapsable Title="@weather_lists.Key" Collapsed="getCollapseOnce()">
                <div class="scrolling-wrapper-flexbox pb-2">
                    @foreach (var weather in weather_lists)
                    {

                        <WeatherForecastDetail WeatherItem="weather" />
                    }
                </div>
            </Collapsable>
        }
    </div>
}

@code {
    private WeatherForecastDto? forecastWeather;
    private ServiceResponseException? error;
    private IEnumerable<IGrouping<string, WeatherList>>? forecastByDays;

    private bool isCollapsed = false;
    private bool getCollapseOnce()
    {
        if (!isCollapsed)
        {
            isCollapsed = true;
            return true;
        }
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        isCollapsed = false;
        try
        {
            forecastWeather = await weatherService.GetForecast();
            forecastByDays = forecastWeather?.WeatherList.GroupBy(x => DateConverter.UnixTimeToLocalDateTime(x.Dt).ToShortDateString());
        }
        catch (ServiceResponseException e)
        {
            error = e;
        }
        catch (Exception e)
        {
        }

    }
}

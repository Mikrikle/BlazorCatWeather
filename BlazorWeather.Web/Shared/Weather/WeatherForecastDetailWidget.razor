@inject IWeatherService weatherService

@if (forecastByDays == null)
{
    @if (error != null)
    {
        <ExceptionAlert ex="error"></ExceptionAlert>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else
{
    <div class="container-fluid" style="max-width: 800px;">
        @foreach (var weather_lists in forecastByDays)
        {
            <div class="card m-1 rounded-5 p-1">
                <Collapsable Title="@weather_lists.Key" SubTitle="@GetShortDate(weather_lists.First().Dt)" Collapsed="GetCollapseOnce()">
                    <div class="scrolling-wrapper-flexbox pb-2">
                        @foreach (var weather in weather_lists)
                        {

                            <WeatherForecastDetail WeatherItem="weather" />
                        }
                    </div>
                </Collapsable>
            </div>
        }
    </div>
}

@code {
    private WeatherForecastDto? forecastWeather;
    private ServiceResponseException? error;
    private IEnumerable<IGrouping<string, WeatherList>>? forecastByDays;

    private int _collapsedCount = 0;
    private bool GetCollapseOnce()
    {
        if (_collapsedCount < 2)
        {
            _collapsedCount++;
            return true;
        }
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        _collapsedCount = 0;
        try
        {
            forecastWeather = await weatherService.GetForecast();
            var culture = new System.Globalization.CultureInfo("ru-RU");
            forecastByDays = forecastWeather?.WeatherList.GroupBy(x => GetDayName(x.Dt));
        }
        catch (ServiceResponseException e)
        {
            error = e;
        }
        catch (Exception e)
        {
        }

    }

    private string GetShortDate(int dt)
    {
        var culture = new System.Globalization.CultureInfo("ru-RU");
        var date = DateConverter.UnixTimeToLocalDateTime(dt);
        return date.ToString("dd/MM");
    }

    private string GetDayName(int dt)
    {
        var culture = new System.Globalization.CultureInfo("ru-RU");
        var date = DateConverter.UnixTimeToLocalDateTime(dt);
        return culture.DateTimeFormat.GetDayName(date.DayOfWeek);
    }
}

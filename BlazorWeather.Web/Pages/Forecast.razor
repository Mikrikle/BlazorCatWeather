@page "/forecast"
@inject IWeatherService weatherService

<h3>Прогноз погоды</h3>

@if (forecastByDays == null)
{
    @if (error != null)
    {
        <ExceptionAlert ex="error"></ExceptionAlert>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else
{
    @foreach (var weather_lists in forecastByDays)
    {
        <Collapsable Title="@weather_lists.Key" Collapsed="true">
            <ChildContent>
                <div class="d-flex justify-content-center flex-wrap">
                    @foreach (var weather in weather_lists)
                    {
                        <div class="card p-1 m-1">
                            <h6>@DateConverter.UnixTimeToLocalDateTime(weather.Dt).ToString("H:mm")</h6>

                            <div class="small">Ощущается как</div>
                            <div class="small">@weather.Main.FeelsLike°C</div>

                            <div>
                                <img src="@($"https://openweathermap.org/img/wn/{weather.Weather.First().Icon}@2x.png")"
                         alt="currentWeather.Weather.First().Icon">
                            </div>

                            <div class="text-center">
                                <span class="small text-black-75">@weather.Weather.First().Description</span>
                                <div class="fs-4">@weather.Main.Temp°C</div>
                                <div class="d-flex flex-row justify-content-center">
                                    <span class="small text-black-75">
                                        @weather.Main.TempMin°C
                                        &nbsp;/&nbsp;
                                        @weather.Main.TempMax°C
                                    </span>
                                </div>
                            </div>


                            <div class="flex-grow-1">
                                <div>
                                    <i class="fas fa-wind fa-fw"></i>
                                    <span class="ms-1">@weather.Wind.Speed м/с</span>
                                </div>
                                <div>
                                    <i class="fas fa-tint fa-fw"></i>
                                    <span class="ms-1"> @weather.Main.Humidity% </span>
                                </div>
                                <div>
                                    <i class="fas fa-cloud fa-fw"></i>
                                    <span class="ms-1"> @weather.Clouds.All% </span>
                                </div>
                                <div>
                                    <i class="fas fa-gauge fa-fw"></i>
                                    <span class="ms-1"> @(Math.Round(weather.Main.Pressure * 0.750064)) мм рт.ст.</span>
                                </div>
                            </div>
                        </div>
                    }
                </div>

            </ChildContent>
        </Collapsable>
    }
}

@code {
    private WeatherForecastDto? forecastWeather;
    private ServiceResponseException? error;
    private IEnumerable<IGrouping<string, WeatherList>>? forecastByDays;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            forecastWeather = await weatherService.GetForecast();
            forecastByDays = forecastWeather?.WeatherList.GroupBy(x => DateConverter.UnixTimeToLocalDateTime(x.Dt).ToShortDateString());
        }
        catch (ServiceResponseException e)
        {
            error = e;
        }

    }
}
